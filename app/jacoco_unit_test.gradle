project.plugins.apply('jacoco')
project.jacoco.toolVersion '0.8.2'
project.android.buildTypes {
    //toggle for report only
    debug {
        testCoverageEnabled true
    }

    release {
        testCoverageEnabled false
    }
}

//如果集成Jenkins Pipeline，只需在Jenkins上安装Jacoco plugin，并且使用下面的Test Stage即可，无需执行jacocoTestReport task
//stage('Test') {
//    steps {
//        sh './gradlew -p ${project} testDebugUnitTest'
//        jacoco(
//                execPattern: "${project}/build/jacoco/testDebugUnitTest.exec",
//                classPattern: "${project}/build/intermediates/javac/Debug, ${project}/build/tmp/kotlin-classes/Debug",
//                sourcePattern: "${project}/src/main/java, ${project}/src/main/kotlin",
//                exclusionPattern: '**/R.class,**/R$*.class,**/*$ViewInjector*.*,**/*$Companion.*,**/*$ViewBinder*.*,**/BuildConfig.*,**/Manifest*.*,**/*$Lambda$*.*,**/*Module.*,**/*Dagger*.*,**/*MembersInjector*.*,**/*_Provide*Factory*.*,**/*_Factory*.*,**/*$*$*.*'
//        )
//    }
//}
project.tasks.create(
        name: 'jacocoTestReport',
        type: JacocoReport,
        dependsOn: "testDebugUnitTest"
) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the ${project.name}."

    def buildDir = project.buildDir
    def coverageSourceDirs = [
            "src/main/java",
            "src/main/kotlin"
    ]
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*$Companion.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Module.*',
            '**/*Dagger*.*',
            '**/*MembersInjector*.*',
            '**/*_Provide*Factory*.*',
            '**/*_Factory*.*',
            '**/*$*$*.*'
    ]
    def javaClasses = fileTree(
            dir: "$buildDir/intermediates/javac/debug",
            excludes: fileFilter
    )
    def kotlinClasses = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )
    classDirectories.from(files([javaClasses], [kotlinClasses]))
    additionalSourceDirs.from(files(coverageSourceDirs))
    sourceDirectories.from(files(coverageSourceDirs))
    executionData.from(files("${project.buildDir}/jacoco/testDebugUnitTest.exec"))
    reports {
        xml.enabled = true
        html.enabled = true
    }
}